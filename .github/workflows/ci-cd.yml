name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_API: dark-nexis-api
  ECR_REPOSITORY_WORKER: dark-nexis-worker
  ECS_SERVICE_API: dark-nexis-api-service
  ECS_SERVICE_WORKER: dark-nexis-worker-service
  ECS_CLUSTER: dark-nexis-cluster

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_darknexis
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install backend dependencies
      run: |
        cd dark-nexis-backend/backend
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_darknexis
        REDIS_URL: redis://localhost:6379/0
      run: |
        cd dark-nexis-backend/backend
        pytest tests/ -v
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Run frontend tests
      run: npm test
    
    - name: Build frontend
      run: npm run build

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push API image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd dark-nexis-backend/backend
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_API:$IMAGE_TAG" >> $GITHUB_OUTPUT
      id: build-api-image
    
    - name: Build, tag, and push Worker image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd dark-nexis-backend/workers
        docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_WORKER:$IMAGE_TAG" >> $GITHUB_OUTPUT
      id: build-worker-image
    
    - name: Deploy API to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: infra/ecs-task-definition-api.json
        service: ${{ env.ECS_SERVICE_API }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        task-definition-family: dark-nexis-api
        container-name: api
        image: ${{ steps.build-api-image.outputs.image }}
    
    - name: Deploy Worker to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: infra/ecs-task-definition-worker.json
        service: ${{ env.ECS_SERVICE_WORKER }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        task-definition-family: dark-nexis-worker
        container-name: worker
        image: ${{ steps.build-worker-image.outputs.image }}
    
    - name: Deploy frontend to S3
      run: |
        npm run build
        aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_NAME }} --delete
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"